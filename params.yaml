
gpu_num: "2"

batch_size: 64
learning_rate: 1.0
epochs: 14
gamma: 0.7

# MNIST
#dataset: 'mnist'
dataset: 'cifar10'

model_name: 'MnistBaseNet'

# # CIFAR-10
# dataset: 'cifar10' # cifar10
# model_name: 'Cifar10BaseNet'



# Training settings
# parser = argparse.ArgumentParser(description='PyTorch MNIST Example')
# parser.add_argument('--batch-size', type=int, default=64, metavar='N',
#                     help='input batch size for training (default: 64)')
# parser.add_argument('--test-batch-size', type=int, default=1000, metavar='N',
#                     help='input batch size for testing (default: 1000)')
# parser.add_argument('--epochs', type=int, default=14, metavar='N',
#                     help='number of epochs to train (default: 14)')
# parser.add_argument('--lr', type=float, default=1.0, metavar='LR',
#                     help='learning rate (default: 1.0)')
# parser.add_argument('--gamma', type=float, default=0.7, metavar='M',
#                     help='Learning rate step gamma (default: 0.7)')
# parser.add_argument('--no-cuda', action='store_true', default=False,
#                     help='disables CUDA training')
# parser.add_argument('--dry-run', action='store_true', default=False,
#                     help='quickly check a single pass')
# parser.add_argument('--seed', type=int, default=1, metavar='S',
#                     help='random seed (default: 1)')
# parser.add_argument('--log-interval', type=int, default=10, metavar='N',
#                     help='how many batches to wait before logging training status')
# parser.add_argument('--save-model', action='store_true', default=False,
#                     help='For Saving the current Model')
# args = parser.parse_args()
# use_cuda = not args.no_cuda and torch.cuda.is_available()


# device = torch.device("cuda" if use_cuda else "cpu")
